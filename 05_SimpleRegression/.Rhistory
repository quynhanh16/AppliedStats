is_connected(Amazon_net, mode="weak")
b=components(Amazon_net, mode="weak")
h <- Amazon_net-vertices(c(14629, 4429))
summary(h)
h_in=degree(h,mode='in')
h_out=degree(h,mode='out')
transitivity(h, type="average")
cent_df <- data.frame( h_in,h_out)
cent_df[order(cent_df$h_in, decreasing = TRUE),]
## strongly connected
is_connected(h, mode="strong")
a=components(h, mode="strong")
## weakly connected
is_connected(h, mode="weak")
b=components(h, mode="weak")
View(a)
View(a)
h <- Amazon_net-vertices(c(14629, 4429, 33))
summary(h)
h_in=degree(h,mode='in')
h_out=degree(h,mode='out')
transitivity(h, type="average")
cent_df <- data.frame( h_in,h_out)
cent_df[order(cent_df$h_in, decreasing = TRUE),]
## strongly connected
is_connected(h, mode="strong")
a=components(h, mode="strong")
## weakly connected
is_connected(h, mode="weak")
b=components(h, mode="weak")
View(a)
View(a)
types <-1:1:vcount(Amazon_net)              ## the ID of the nodes
deg_in <- degree(Amazon_net, mode= 'in')
deg_out <- degree(Amazon_net, mode= 'out')
cent_df <- data.frame(types, deg_in,deg_out, x)
# compute the density
edge_density(Amazon_net)
# compute the average clustering coefficient
transitivity(Amazon_net, type="average")
# compute the local clustering coefficient for some nodes
x=transitivity(Amazon_net, type="local", vids=1:1:vcount(Amazon_net))
types <-1:1:vcount(Amazon_net)              ## the ID of the nodes
deg_in <- degree(Amazon_net, mode= 'in')
deg_out <- degree(Amazon_net, mode= 'out')
cent_df <- data.frame(types, deg_in,deg_out, x)
deg_in_centrality= cent_df[order(cent_df$deg_in, decreasing = TRUE),]
deg_out_centrality= cent_df[order(cent_df$deg_out, decreasing = TRUE),]
x_sort=cent_df[order(cent_df$x, decreasing = TRUE),]
x_cluster=na.exclude(x)
View(deg_in_centrality)
View(deg_in_centrality)
find(x<0.5)
x<=0.5
where <- deg_in_centrality == 0.50
where
deg_in_centrality= cent_df[order(cent_df$deg_in, decreasing = TRUE),]
deg_out_centrality= cent_df[order(cent_df$deg_out, decreasing = TRUE),]
x_sort=cent_df[order(cent_df$x, decreasing = TRUE),]
x_cluster=na.exclude(x)
where <- deg_in_centrality == 0.50
cent_df$type[where]
deg_in_centrality= cent_df[order(cent_df$deg_in, decreasing = TRUE),]
deg_out_centrality= cent_df[order(cent_df$deg_out, decreasing = TRUE),]
x_sort=cent_df[order(cent_df$x, decreasing = TRUE),]
x_cluster=na.exclude(x)
where <- deg_in_centrality == 1
cent_df$type[where]
View(where)
View(where)
deg_in_centrality= cent_df[order(cent_df$deg_in, decreasing = TRUE),]
deg_out_centrality= cent_df[order(cent_df$deg_out, decreasing = TRUE),]
x_sort=cent_df[order(cent_df$x, decreasing = TRUE),]
x_cluster=na.exclude(x)
where <- deg_in_centrality == 1
cent_df$type[where]
View(where)
View(where)
which(deg_in==1)
which(deg_in==1)[[1]]
which(deg_in==1)[1]
which(deg_in==1)
#h <- Amazon_net-vertices(c(14629, 4429, 33))
h <- Amazon_net-vertices(which(deg_in==1))
summary(h)
h_in=degree(h,mode='in')
h_out=degree(h,mode='out')
transitivity(h, type="average")
cent_df <- data.frame( h_in,h_out)
cent_df[order(cent_df$h_in, decreasing = TRUE),]
which(deg_in==1)
## strongly connected
is_connected(h, mode="strong")
a=components(h, mode="strong")
## weakly connected
is_connected(h, mode="weak")
b=components(h, mode="weak")
View(a)
View(a)
sort(a$csize, decreasing='TRUE'
)
sort(a$csize, decreasing=TRUE)
q()
w()
q()
q()
q()
library(igraph)
library("igraphdata")
data(enron)
summary(enron)
V(enron)$Name
summary(enron)
V(enron)$Note
summary(enron)
enron$LDC_names
enron$LDC_desc
summary(enron)
E(enron)$Topic
E(enron)$LDC_Topic
E(enron)$LDC_topic
q()
library(igraph)
library("igraphdata")
data(encron)
data(enron)
summary(enron)
V(enron)$Name
V(enron)$Note
plot(x,dgamma(x,30,30)+dgamma(x,14,23),type="l")
x=linspace(1,100,100)
x=seq(1,100,by=0.2)
plot(x,dgamma(x,30,30)+dgamma(x,14,23),type="l")
lines(x,(dgamma(x,30,30)+dgamma(x,14,23))*x^3,lwd=2)
plot(x,(dgamma(x,15,15)+dgamma(x,33,55)),type="l")
lines(x,(dgamma(x,15,15)+dgamma(x,33,55))*x^3,lwd=2)
plot(x,dgamma(x,30,30)+dgamma(x,14,23),type="l")
lines(x,(dgamma(x,30,30)+dgamma(x,14,23))*x^3,lwd=2)
x=seq(0.1,10, by = 0.2)
plot(x,dgamma(x,30,30)+dgamma(x,14,23),type="l")
lines(x,(dgamma(x,30,30)+dgamma(x,14,23))*x^3,lwd=2)
plot(x,(dgamma(x,15,15)+dgamma(x,33,55)),type="l")
lines(x,(dgamma(x,15,15)+dgamma(x,33,55))*x^3,lwd=2)
install.packages('Sleuth2')
library(Sleuth2)
summary(case0201)
a=case020
a=case0201
Bumpus=case0201
Bumpus=case0201
summary(Bumpus)
View(Bumpus)
View(Bumpus)
View(Bumpus)
## side by side box plot
boxplot(Bumpus$Humerus~Bumpus$Status) ## side by side box plot HERE
## side by side box plot
boxplot(Bumpus$Humerus~Bumpus$Status, xlab= 'Status', ylab = ' Humerus Length') ## side by side box plot HERE
## side by side box plot
boxplot(Bumpus$Humerus~Bumpus$Status, xlab= 'Status', ylab = ' Humerus Length (inches)') ## side by side box plot HERE
View(Bumpus)
## draw side by side histogram
par(mfrow=c(1,2))# subplots of 2 rows by 1 column
## unpack the data by status
Perished=Bumpus$Humerus[Bumpus$Status=="Perished"]
Survived=Bumpus$Humerus[Bumpus$Status=="Survived"]
## draw side by side histogram
par(mfrow=c(1,2))# subplots of 2 rows by 1 column
#one hist atop the other one
hist(Perished,main="Perished",col='blue',prob=T) ## draw histogram for blue states HERE
hist(Survived,main="Survived",col='red',prob=T) ## draw histogram for blue states HERE
hist(Survived,main="Survived",col='red',xlim = c(640,800),prob=T) ## draw histogram  HERE
#one hist atop the other one
hist(Perished,main="Perished",col='blue',xlim = c(640,800),prob=T) ## draw histogram HERE
## unpack the data by status
Perished=Bumpus$Humerus[Bumpus$Status=="Perished"]
Survived=Bumpus$Humerus[Bumpus$Status=="Survived"]
## draw side by side histogram
par(mfrow=c(1,2))# subplots of 2 rows by 1 column
#one hist atop the other one
hist(Perished,main="Perished",col='blue',xlim = c(640,800),prob=T) ## draw histogram HERE
hist(Survived,main="Survived",col='red',xlim = c(640,800),prob=T) ## draw histogram  HERE
summary(Survived)
summary(Perished)
summary(Survived)
q()
pwd()
wd()
getwd()
getwd()
library("Sleuth2")
data=ex0333
View(data)
View(data)
data2=ex0321
View(data2)
View(data2)
q()
x=c(5.79, 1579.52, 2323.70)
y=c(68.8, 108.29, 110.29, 426.07, 1067.60)
xLog=log(x)
yLog=log(y)
mean(xLog)
mean(yLog)
sd(xLog)
sd(yLog)
mean(xLog)-mean(yLog)
exp(mean(xLog)-mean(yLog))
var(xLog)
q()
in_state=c(1000, 4000, 5000,8000,40000)
mean(in_state)
log(in_state)
in_state_loglog(in_state)
in_state_log=log(in_state)
mean(in_state_log)
log(11600)
log(5000)
q()
x1=c(5.79, 1579.52, 2323,70)
x1=c(5.79, 1579.52, 2323.70)
x2=c(68.8, 108.29, 110.29, 426.07, 1067.60)
y1=log(x1)
y2=log(x2)
y1
y2
mean(y1)
mean(y2)
mean(y1)-mean(y2)
exp(mean(y1)-mean(y2))
var(y1)
var(y2)
y1
y2
0.295+4.303*sqrt(11.257/3+1.31/5)
exp(-8.326)
exp(8.9)
(8.5-11/2)/sqrt(11/4)
q()
getwd()
library(igraph) #always call this library to do graph/network analysis in R
MyData <- read.table("myData.txt") # read network from text
##
head(MyData)
MyData <- read.table("myData.txt") # read network from text
##
head(MyData)
MyData <- read.table("myData_1.txt") # read network from text
##
head(MyData)
my_net=graph_from_data_frame(MyData, directed=TRUE)
summary(my_net)
in_degree=degree(my_net, mode="in") # degree of the network
hist(in_degree, probability=T, col="lightblue", xlab="Vertex Degree", ylab="Frequency", main="")
# Compute summary statistics of degree distribution
summary(in_degree)
mean(in_degree)
var(in_degree)
sd(in_degree)
sd(in_degree)/mean(in_degree)
out_degree=degree(my_net, mode="out") # degree of the network
hist(out_degree, probability=T, col="lightblue", xlab="Vertex Degree", ylab="Frequency", main="")
# Compute summary statistics of degree distribution
summary(out_degree)
mean(out_degree)
var(out_degree)
sd(out_degree)
sd(out_degree)/mean(out_degree)
count_components(my_net, mode="strong")
## strongly connected
is_connected(my_net, mode="strong")
components(my_net,mode = "strong")
count_components(my_net, mode="strong")
# compute the density
edge_density(my_net, loops = FALSE)
# compute the clustering coefficient
# compute the average clustering coefficient
transitivity(my_net, type="average")
# compute the density
edge_density(my_net, loops = FALSE)
# compute the clustering coefficient
# compute the average clustering coefficient
transitivity(my_net, type=c("average", "weight")
# compute the density
edge_density(my_net, loops = FALSE)
# compute the clustering coefficient
# compute the average clustering coefficient
transitivity(my_net, type= "weight")
# compute the density
edge_density(my_net, loops = FALSE)
# compute the clustering coefficient
# compute the average clustering coefficient
transitivity(my_net, type= "global")
transitivity(my_net, type= "average")
# compute average distance
mean_distance(my_net, directed=TRUE)
#mean_distance(graph, weights = NULL, directed = TRUE, unconnected = TRUE, details = FALSE)
# compute the diameter
diameter(my_net, directed=TRUE)
assortativity_degree(my_net, directed=TRUE)
k.nn.deg.in.in <- knn(my_net,V(my_net),mode ="in", neighbor.degree.mode =  "in")$knnk
plot( k.nn.deg.in.in, xlab='In degree', ylab='In degree')
k.nn.deg.in.out <- knn(my_net,V(my_net),mode ="in", neighbor.degree.mode =  "out")$knnk
plot(k.nn.deg.in.out, xlab='In degree', ylab='Out degree')
k.nn.deg.out.in <- knn(my_net,V(my_net),mode ="out", neighbor.degree.mode =  "in")$knnk
plot(k.nn.deg.out.in, xlab='Out degree', ylab='In degree')
k.nn.deg.out.out <- knn(my_net,V(my_net),mode ="out", neighbor.degree.mode =  "out")$knnk
plot(k.nn.deg.out.out, xlab='Out degree', ylab='Out degree')
summary(my_net)
bet=betweeness(my_net,directed=TRUE,weights=E(my_net)$V3)
bet=betweenness(my_net,directed=TRUE,weights=E(my_net)$V3)
bet
bet=betweenness(my_net,directed=TRUE,weights=E(my_net)$V3)
hist(bet)
eigen=eigen_centrality(my_net,directed=TRUE,weights=E(my_net)$V3)
hist(eigen)
eigen=eigen_centrality(my_net,directed=TRUE,weights=E(my_net)$V3)
eigen=eigen_centrality(my_net,directed=TRUE,weights=E(my_net)$V3)
hist(eigen$vector)
eb=cluster_edge_betweenness(my_net, directed=TRUE)
eb
modularity(eb)
membership(eb)
View(eb)
View(eb)
eb=cluster_edge_betweenness(my_net, weights=E(my_net)$weight,directed=TRUE)
eb
modularity(eb)
membership(eb)
UK=as.undirected(my_net, mode = c("collapse"), edge.attr.comb = igraph_opt("edge.attr.comb"))
summary(UK)
UK_ga <- cluster_fast_greedy(UK)
length(UK_ga)
sizes(UK_ga)
membership(UK_ga)
modularity(UK_ga)
communities(UK_ga)
q()
pf(7.801, 9, 20, ncp, lower.tail = FALSE)
pf(7.801, 9, 20, lower.tail = FALSE)
qt(.975, df = c(1:10,20,50,100,1000))
q()
library(Sleuth2)
data=case(ex0321)
data=case0321
data=ex0321
View(data)
View(data)
data1=data$Lifelength[data$Censored==0]
data2=data$Expected[data$Censored==0]
hist(data1)
hist(data2)
hist(log(data1))
hist(1/data1)
hist(sqrt(data1))
hist(sqrt(data2))
hist(log(data1))
hist(1/data1)
hist(sqrt(data2))
hist(data1/(1-data1))
hist(logit(data1))
hist(data1/(1-data2))
hist(data2/(1-data2))
hist(data1-data2)
hist(1/(data1-data2))
y=data1-data2
hist(y/(1-y))
hist(log(data1/(1-data1)))
hist(data1/(1-data1))
hist(data1-data2)
qqnorm(y, pch = 19, frame = FALSE)
qqline(y, col = "color name", lwd = 3)
qqnorm(y, pch = 19, frame = FALSE)
qqline(y, col = "red", lwd = 3)
hist(1/(data1-data2))
t.test(1/y,mu=0)
x=1/y
help t.test
t.test ?
=
t.test(x,mu=0)
t.test(data1,data2,pair=TRUE)
x
setwd("C:/Users/nguyenap/OneDrive - University of Indianapolis/Desktop/UIndy/Teaching/Math 510/RCode/05_SimpleRegression")
HealthData=read.csv("HealthData.csv")
par(mfrow=c(1,2))# subplots of 2 rows by 1 column
hist(HealthData$Life.expectancy.all.races.2017)
hist(HealthDara$CurrentSmoker.)
par(mfrow=c(1,2))# subplots of 2 rows by 1 column
hist(HealthData$Life.expectancy.all.races.2017)
hist(HealthData$CurrentSmoker.)
{r, fig.width=8, fig.height=4}
par(mfrow=c(1,2))# subplots of 2 rows by 1 column
qqnorm(HealthData$Life.expectancy.all.races.2017, pch = 19, frame = FALSE)
qqline(HealthData$Life.expectancy.all.races.2017, col = "red", lwd = 3)
qqnorm(HealthData$CurrentSmoker., pch = 19, frame = FALSE)
qqline(HealthData$CurrentSmoker., col = "red", lwd = 3)
lm_model = lm(Life.expectancy.all.races.2017~CurrentSmoker.,HealthData)
lm_model = lm(Life.expectancy.all.races.2017~CurrentSmoker.,HealthData)
lm_model
lm_model = lm(Life.expectancy.all.races.2017~CurrentSmoker.,HealthData)
summary(lm_model)
z=data.frame(Intercept=1, CurrentSmoker.=17.08)
predict(lm_model,z, interval="prediction", level=.95)
predict(lm_model,z, interval="confidence", level=.95)
library(pracma)
N=100
zInt=linspace(1, 1, n=N)
zSmoke=linspace(min(HealthData$CurrentSmoker.),max(HealthData$CurrentSmoker.), n=N)
zVec=data.frame(Intercept=zInt, CurrentSmoker.=zSmoke)
yPre=predict(lm_model,zVec, interval="prediction", level=.95)
yMean=predict(lm_model,zVec, interval="confidence", level=.95)
plot(HealthData$CurrentSmoker., HealthData$Life.expectancy.all.races.2017, col= "red", main= "Life Exp against smoking rate", xlab= "Smoking", ylab= "Life Exp", pch=19)
abline(lm_model, col= "black" , lwd= 3)
yFitted=Fitted(lm_model)
yFitted=Fitted(lm_model)
yFitted=fitted(lm_model)
yFitted
yFitted=fitted(lm_model)
yRes= resid(lm_model)
HealthData_LinearRegression=dataFrame(HealthData, yFitted, yRes)
yFitted=fitted(lm_model)
yRes= resid(lm_model)
HealthData_LinearRegression=data.frame(HealthData, yFitted, yRes)
write.csv(HealthData_LinearRegression, "HealthData_LinearRegression.csv", row.names=TRUE)
yPre
plot(HealthData$CurrentSmoker., HealthData$Life.expectancy.all.races.2017, col= "red", main= "Life Exp against smoking rate", xlab= "Smoking", ylab= "Life Exp", pch=19)
abline(lm_model, col= "black" , lwd= 3)
lines(zVec, yPred[,2], col= "blue")  #lower prediction value
library(pracma)
N=100
zInt=linspace(1, 1, n=N)
zSmoke=linspace(min(HealthData$CurrentSmoker.),max(HealthData$CurrentSmoker.), n=N)
zVec=data.frame(Intercept=zInt, CurrentSmoker.=zSmoke)
yPred=predict(lm_model,zVec, interval="prediction", level=.95)
yMean=predict(lm_model,zVec, interval="confidence", level=.95)
plot(HealthData$CurrentSmoker., HealthData$Life.expectancy.all.races.2017, col= "red", main= "Life Exp against smoking rate", xlab= "Smoking", ylab= "Life Exp", pch=19)
abline(lm_model, col= "black" , lwd= 3)
lines(zVec, yPred[,2], col= "blue")  #lower prediction value
plot(HealthData$CurrentSmoker., HealthData$Life.expectancy.all.races.2017, col= "red", main= "Life Exp against smoking rate", xlab= "Smoking", ylab= "Life Exp", pch=19)
abline(lm_model, col= "black" , lwd= 3)
lines(zVec[,2], yPred[,2], col= "blue")  #lower prediction value
lines(zVec[,2], yPred[,3], col= "blue")  #upper prediction value
lines(zVec[,2], yMean[,2], col= "green")  #lower mean response value
lines(zVec[,2], yMean[,3], col= "green")  #uppwer mean response value
plot(lm_full)
plot(lm_model)
lm_reduced_Utah = lm(Life.expectancy.all.races.2017 ~CurrentSmoker.,HealthData,subset=(State != "Utah"))
summary(lm_reduced_Utah)
plot(HealthData$CurrentSmoker., HealthData$Life.expectancy.all.races.2017, col= "red", main= "Life Exp against smoking rate", xlab= "Smoking", ylab= "Life Exp", pch=19)
abline(lm_model, col= "black" , lwd= 3)
abline(lm_reduced_Utah, col= "blue" , lwd= 3)
plot(HealthData$CurrentSmoker., HealthData$Life.expectancy.all.races.2017, col= "red", main= "Life Exp against smoking rate", xlab= "Smoking", ylab= "Life Exp", pch=19)
abline(lm_model, col= "black" , lwd= 3)
abline(lm_reduced_Utah, col= "green" , lwd= 3)
plot(dfbeta(lm_model)[,2],ylab="Change in pop15 coef")
abline(h=0)
plot(dfbeta(lm_model)[,3],ylab="Change in pop15 coef")
plot(dfbeta(lm_model)[,1],ylab="Change in pop15 coef")
abline(h=0)
plot(dfbeta(lm_model)[,2],ylab="Change in the slope")
abline(h=0)
identify(xData, yData,tolerance=1)
plot(dfbeta(lm_model)[,2],ylab="Change in the slope")
abline(h=0)
identify()
plot(dfbeta(lm_model)[,2],ylab="Change in the slope")
abline(h=0)
plot(HealthData$CurrentSmoker.,residuals(lm_model), xlab="Smoking Rate",ylab
="Residuals")
abline(h=0)
hatv <- hatvalues(lm_model)
head(hatv)
hatv <- hatvalues(lm_model)
head(hatv)
countries <- row.names(HealthData)
halfnorm(hatv,labs=countries,ylab="Leverages")
hatv = hatvalues(lm_model)
rvalue= rstandard(lm_model)
stud = rstudent(lm_model)
cook = cooks.distance(lm_model)
hatv
rvalue
stud
cook
lm_model_log = lm(Life.expectancy.all.races.2017~log(CurrentSmoker.),HealthData)
summary(lm_model_log)
lm_model_log = lm(log(Life.expectancy.all.races.2017)~log(CurrentSmoker.),HealthData)
summary(lm_model_log)
lm_reduced_Utah = lm(Life.expectancy.all.races.2017 ~CurrentSmoker.,HealthData,subset=-c(45))
summary(lm_reduced_Utah)
lm_reduced_Utah = lm(Life.expectancy.all.races.2017 ~CurrentSmoker.,HealthData,subset=(State != "Utah"))
summary(lm_reduced_Utah)
#find Square Error (SSE) (unexplained variation)
sse = sum((yFitted- HealthData$Life.expectancy.all.races.2017)^2)
#find SS Regression (SSR) (variation explained by regression line)
ssr = sum((yFitted - mean(HealthData$Life.expectancy.all.races.2017))^2)
#find SST (total sum of squares)
sst = ssr + sse
# r^2
r_square=ssr/sst
# correlation
r_fromModel=sqrt(r_square)
# Residual standard error
n=length(HealthData$Life.expectancy.all.races.2017)
Residue_SE=sqrt(sse/(n-2))
sse
plot(dfbeta(lm_model)[,2],ylab="Change in the slope")
abline(h=0)
plot(dfbeta(lm_model)[,1],ylab="Change in the intercept")
abline(h=0)
q()
