plot(g)
summary(g)
plot(g, layout= layout.circle,vertex.label.dist = 5, main = "Network")
V(g)$name <- c("Student 1", "Student 2", "Student 3", "Student 4", "Student 5", "Student 6", "Student 7")
V(g)$gender <- c("F", "M", "F", "M", "F", "F", "M")
V(g)$age <- c(25, 19, 21, 22,20, 21, 23)
plot(g)
summary(g)
plot(g, layout= layout.fruchterman.reingold,vertex.label.dist = 5, main = "Network")
adjm <- matrix(c(0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0), nrow=5, ncol=5, byrow=TRUE)
g1 <- graph_from_adjacency_matrix( adjm , mode="undirected")
plot(g1)
adjm <- matrix(c(0,2,0,1,3,2,0,1,0,0,0,1,0,4,1,1,0,4,0,1,3,0,1,1,0), nrow=5, ncol=5, byrow=TRUE)
g2 <- graph_from_adjacency_matrix( adjm , mode="undirected", weighted=TRUE)
plot(g2,edge.width = E(g2)$weight)
E(g2)$weight
q()
library(igraph) #always call this library to do graph/network analysis in R
adjm <- matrix(c(0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0), nrow=5, ncol=5, byrow=TRUE)
g1 <- graph_from_adjacency_matrix( adjm , mode="undirected")
plot(g1)
adjm(1,1)
adjm[1,1)]
adjm[1,1]
adjm[1,1]=5
adjm
st <- make_star(20)
plot(st, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 3, mode = "undirected")
plot(tr, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 3, mode = "directed")
tr <- make_tree(40, children = 3)
plot(tr, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 3, mode= "undirected")
plot(tr, vertex.size=10, vertex.label=NA)
st <- make_star(20,mode="directed")
st <- make_star(20,mode="out")
plot(st, vertex.size=10, vertex.label=NA)
rn <- make_ring(40, mode="directed")
rn <- make_ring(40, mode="in")
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 3, mode= "in")
plot(tr, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 3, mode= "out")
plot(tr, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 3, mode= "mutual")
tr <- make_tree(40, children = 3)
plot(tr, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 3, mode="undirected")
plot(tr, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 3, mode="undirected")
plot(tr, vertex.size=10)
tr <- make_tree(40, children = 3, mode="undirected")
plot(tr, vertex.size=10, vertex.label=NA)
g.bip <- graph_from_literal(actor1:actor2:actor3,movie1:movie2, actor1:actor2 - movie1, actor2:actor3 - movie2)
g.bip <- graph_from_literal(actor1:actor2:actor3,movie1:movie2, actor1:actor2 - movie1, actor2:actor3 - movie2)
plot(g.bip)
g.bip <- graph_from_literal(actor1:actor2:actor3,movie1:movie2, actor1:actor2 - movie1, actor2:actor3 - movie2)
plot(g.bip, layout= layout.bipartite)
g.bip <- graph_from_literal(actor1:actor2:actor3,movie1:movie2, actor1:actor2 - movie1, actor2:actor3 - movie2)
V(g.bip)$type <- grepl("ˆmovie", V(g.bip)$name)
g.bip <- graph_from_literal(actor1:actor2:actor3,movie1:movie2, actor1:actor2 - movie1, actor2:actor3 - movie2)
V(g.bip)$type <- grepl("ˆmovie", V(g.bip)$name)
print_all(g.bip)
g.bip <- graph_from_literal(actor1:actor2:actor3,movie1:movie2, actor1:actor2 - movie1, actor2:actor3 - movie2)
V(g.bip)$type <- grepl("ˆmovie", V(g.bip)$name)
print_all(g.bip)
plot(g.bip, layout= layout.bipartite())
g.bip <- graph_from_literal(actor1:actor2:actor3,movie1:movie2, actor1:actor2 - movie1, actor2:actor3 - movie2)
V(g.bip)$type <- grepl("ˆmovie", V(g.bip)$name)
print_all(g.bip)
plot(g.bip, layout= layout.bipartite)
library(igraph) #always call this library to do graph/network analysis in R
g <- graph_from_literal(1-2, 1-3, 2-3, 2-4, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7) # create a graph by listing all the links
V(g) # print the node
E(g) # print the edges
print_all(g) # this will print everything
plot(g) # to plot the graph
A= as_adjacency_matrix(g) # print out its adjacency matrix
A
dg <- graph_from_literal(1-+2, 1-+3, 2++3)
V(dg)
E(dg)
print_all(dg)
plot(dg)
as_adjacency_matrix(dg)
dg <- graph_from_literal(Sam-+Mary, Sam-+Tom,
Mary++Tom)
plot(dg)
h <- g-vertices(c(6,7))
plot(h)
h <- h + vertices(c(6,7))
plot(h)
h <- h + edges(c(4,6),c(4,7),c(5,6),c(6,7))
plot(h)
V(g)$name <- c("Student 1", "Student 2", "Student 3", "Student 4", "Student 5", "Student 6", "Student 7")
V(g)$gender <- c("F", "M", "F", "M", "F", "F", "M")
V(g)$age <- c(25, 19, 21, 22,20, 21, 23)
plot(g)
summary(g)
adjm <- matrix(c(0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0), nrow=5, ncol=5, byrow=TRUE)
g1 <- graph_from_adjacency_matrix( adjm , mode="undirected")
plot(g1)
adjm <- matrix(c(0,2,0,1,3,2,0,1,0,0,0,1,0,4,1,1,0,4,0,1,3,0,1,1,0), nrow=5, ncol=5, byrow=TRUE)
g2 <- graph_from_adjacency_matrix( adjm , mode="undirected", weighted=TRUE)
plot(g2,edge.width = E(g2)$weight)
E(g2)$weight
eg <- make_empty_graph(10)
plot(eg, vertex.size=10, vertex.label=NA)
fg <- make_full_graph(10)
plot(fg, vertex.size=10, vertex.label=NA)
st <- make_star(20,mode="out")
plot(st, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 3, mode="undirected")
plot(tr, vertex.size=10, vertex.label=NA)
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
a=2
a=2
a
library(igraph) #always call this library to do graph/network analysis in R
library(igraph) #always call this library to do graph/network analysis in R
adjm <- matrix(c(0,2,0,1,3,2,0,1,0,0,0,1,0,4,1,1,0,4,0,1,3,0,1,1,0), nrow=5, ncol=5, byrow=TRUE)
g2 <- graph_from_adjacency_matrix( adjm , mode="undirected", weighted=TRUE)
plot(g2,edge.width = E(g2)$weight, main="weighted graph")
E(g2)$weight
q()
q()
library(igraph)
# generate power law distribution
n=10000
a= runif(n, min = 0, max = 1)
xmin=5
alpha=2.1
x = xmin*(1-a)^(-1/(alpha-1));
# plot a typical histogram
hist(x, breaks=100, xlim=c(0,5000))
# fit the distribution
source("plfit.R")
plfit(x)
# plot the distribution
source("plplot.R")
plplot(x,5.604203,2.109504)
Example2= read.csv("FittingDistributionExample.csv")
#take a look
head(Example2)
Example2_net=graph_from_data_frame(Example2, directed=FALSE)
summary(Example2_net)
plot(Example2_net, layout= layout.fruchterman.reingold,vertex.label=NA, vertex.size=5, vertex.color='red')
# fit the distribution
fit_values=fit_power_law(x, xmin = NULL, force.continuous="TRUE", implementation = "plfit")
fit_values
# plot the distribution
source("plplot.R")
plplot(x,fit_values$xmin,fit_values$alpha)
Example2= read.csv("FittingDistributionExample.csv")
#take a look
head(Example2)
Example2_net=graph_from_data_frame(Example2, directed=FALSE)
summary(Example2_net)
plot(Example2_net, layout= layout.fruchterman.reingold,vertex.label=NA, vertex.size=5, vertex.color='red')
## Degree distribution
Example2_degree=degree(Example2_net) # degree of the network
hist(Example2_degree, probability=T, col="lightblue", xlab="Vertex Degree", ylab="Frequency", main="", breaks=50)
# Compute summary statistics of degree distribution
summary(Example2_degree)
mean(Example2_degree)
var(Example2_degree)
sd(Example2_degree)
sd(Example2_degree)/mean(Example2_degree)
plot(Example2_net, layout= layout.fruchterman.reingold,vertex.label=NA, vertex.size=5, vertex.color='red')
## Degree distribution
Example2_degree=degree(Example2_net) # degree of the network
hist(Example2_degree, probability=T, col="lightblue", xlab="Vertex Degree", ylab="Frequency", main="", breaks=50)
# Compute summary statistics of degree distribution
summary(Example2_degree)
mean(Example2_degree)
var(Example2_degree)
sd(Example2_degree)
sd(Example2_degree)/mean(Example2_degree)
# fit the distribution
fit_values=fit_power_law(facebook_degree, xmin = NULL, force.continuous="FALSE", implementation = "plfit")
# fit the distribution
fit_values=fit_power_law(Example2_degree, xmin = NULL, force.continuous="FALSE", implementation = "plfit")
# fit the distribution
fit_values=fit_power_law(Example2_degree, xmin = NULL, force.continuous="FALSE", implementation = "plfit")
fit_values
plfit(Example2_degree,finite=TRUE)
library(igraph)
source("plplot.R")
library(pracma)
plfit(Example2_degree,finite=TRUE)
plplot(Example2_degree,fit_values$xmin,fit_values$alpha)
facebook_data <- read.table("facebook_combined.txt") # read network from text
##
head(facebook_data)
#convert to an igraph network
facebook_net=graph_from_data_frame(facebook_data, directed=FALSE)
summary(facebook_net)
l <- layout_with_drl(facebook_net) #layout for large network
plot(facebook_net, layout=l, vertex.label=NA, vertex.size=5, vertex.color='red')
## Degree distribution
facebook_degree=degree(facebook_net) # degree of the network
hist(facebook_degree, probability=T, col="lightblue", xlab="Vertex Degree", ylab="Frequency", main="", breaks=50)
# Compute summary statistics of degree distribution
summary(facebook_degree)
mean(facebook_degree)
var(facebook_degree)
sd(facebook_degree)
sd(facebook_degree)/mean(facebook_degree)
fit_values=fit_power_law(facebook_degree, xmin = NULL, force.continuous="FALSE", implementation = "plfit")
fit_values
# plot the distribution
plplot(facebook_degree, fit_values$xmin, fit_values$alpha)
# generate power law distribution
n=10000
a= runif(n, min = 0, max = 1)
xmin=5
alpha=2.1
x = xmin*(1-a)^(-1/(alpha-1));
# plot a typical histogram
hist(x, breaks=100)
# plot a typical histogram
hist(x)
# plot a typical histogram
hist(x, breaks=100, xlim=c(0,50000))
# plot a typical histogram
hist(x)
q()
q()
a=data(EnronMailUSC1)
data(EnronMailUSC)
library(netdata)
q()
q()
library(igraph) #always call this library to do graph/network analysis in R
source("plplot.R")
library(pracma)
Amazon_data <- read.table("Amazon0302.txt") # read network from text
##
head(Amazon_data)
#convert to an igraph network
Amazon_net=graph_from_data_frame(Amazon_data, directed=TRUE)
summary(Amazon_net)
# fit the distribution
fit_values=fit_power_law(Amazon_degree_in, xmin = NULL, force.continuous="FALSE", implementation = "plfit")
## strongly connected
is_connected(Amazon_net, mode="strong")
a=components(Amazon_net, mode="strong")
## weakly connected
is_connected(Amazon_net, mode="weak")
b=components(Amazon_net, mode="weak")
h <- Amazon_net-vertices(c(14629, 4429))
summary(h)
h_in=degree(h,mode='in')
h_out=degree(h,mode='out')
transitivity(h, type="average")
cent_df <- data.frame( h_in,h_out)
cent_df[order(cent_df$h_in, decreasing = TRUE),]
## strongly connected
is_connected(h, mode="strong")
a=components(h, mode="strong")
## weakly connected
is_connected(h, mode="weak")
b=components(h, mode="weak")
View(a)
View(a)
h <- Amazon_net-vertices(c(14629, 4429, 33))
summary(h)
h_in=degree(h,mode='in')
h_out=degree(h,mode='out')
transitivity(h, type="average")
cent_df <- data.frame( h_in,h_out)
cent_df[order(cent_df$h_in, decreasing = TRUE),]
## strongly connected
is_connected(h, mode="strong")
a=components(h, mode="strong")
## weakly connected
is_connected(h, mode="weak")
b=components(h, mode="weak")
View(a)
View(a)
types <-1:1:vcount(Amazon_net)              ## the ID of the nodes
deg_in <- degree(Amazon_net, mode= 'in')
deg_out <- degree(Amazon_net, mode= 'out')
cent_df <- data.frame(types, deg_in,deg_out, x)
# compute the density
edge_density(Amazon_net)
# compute the average clustering coefficient
transitivity(Amazon_net, type="average")
# compute the local clustering coefficient for some nodes
x=transitivity(Amazon_net, type="local", vids=1:1:vcount(Amazon_net))
types <-1:1:vcount(Amazon_net)              ## the ID of the nodes
deg_in <- degree(Amazon_net, mode= 'in')
deg_out <- degree(Amazon_net, mode= 'out')
cent_df <- data.frame(types, deg_in,deg_out, x)
deg_in_centrality= cent_df[order(cent_df$deg_in, decreasing = TRUE),]
deg_out_centrality= cent_df[order(cent_df$deg_out, decreasing = TRUE),]
x_sort=cent_df[order(cent_df$x, decreasing = TRUE),]
x_cluster=na.exclude(x)
View(deg_in_centrality)
View(deg_in_centrality)
find(x<0.5)
x<=0.5
where <- deg_in_centrality == 0.50
where
deg_in_centrality= cent_df[order(cent_df$deg_in, decreasing = TRUE),]
deg_out_centrality= cent_df[order(cent_df$deg_out, decreasing = TRUE),]
x_sort=cent_df[order(cent_df$x, decreasing = TRUE),]
x_cluster=na.exclude(x)
where <- deg_in_centrality == 0.50
cent_df$type[where]
deg_in_centrality= cent_df[order(cent_df$deg_in, decreasing = TRUE),]
deg_out_centrality= cent_df[order(cent_df$deg_out, decreasing = TRUE),]
x_sort=cent_df[order(cent_df$x, decreasing = TRUE),]
x_cluster=na.exclude(x)
where <- deg_in_centrality == 1
cent_df$type[where]
View(where)
View(where)
deg_in_centrality= cent_df[order(cent_df$deg_in, decreasing = TRUE),]
deg_out_centrality= cent_df[order(cent_df$deg_out, decreasing = TRUE),]
x_sort=cent_df[order(cent_df$x, decreasing = TRUE),]
x_cluster=na.exclude(x)
where <- deg_in_centrality == 1
cent_df$type[where]
View(where)
View(where)
which(deg_in==1)
which(deg_in==1)[[1]]
which(deg_in==1)[1]
which(deg_in==1)
#h <- Amazon_net-vertices(c(14629, 4429, 33))
h <- Amazon_net-vertices(which(deg_in==1))
summary(h)
h_in=degree(h,mode='in')
h_out=degree(h,mode='out')
transitivity(h, type="average")
cent_df <- data.frame( h_in,h_out)
cent_df[order(cent_df$h_in, decreasing = TRUE),]
which(deg_in==1)
## strongly connected
is_connected(h, mode="strong")
a=components(h, mode="strong")
## weakly connected
is_connected(h, mode="weak")
b=components(h, mode="weak")
View(a)
View(a)
sort(a$csize, decreasing='TRUE'
)
sort(a$csize, decreasing=TRUE)
q()
w()
q()
q()
q()
library(igraph)
library("igraphdata")
data(enron)
summary(enron)
V(enron)$Name
summary(enron)
V(enron)$Note
summary(enron)
enron$LDC_names
enron$LDC_desc
summary(enron)
E(enron)$Topic
E(enron)$LDC_Topic
E(enron)$LDC_topic
q()
library(igraph)
library("igraphdata")
data(encron)
data(enron)
summary(enron)
V(enron)$Name
V(enron)$Note
plot(x,dgamma(x,30,30)+dgamma(x,14,23),type="l")
x=linspace(1,100,100)
x=seq(1,100,by=0.2)
plot(x,dgamma(x,30,30)+dgamma(x,14,23),type="l")
lines(x,(dgamma(x,30,30)+dgamma(x,14,23))*x^3,lwd=2)
plot(x,(dgamma(x,15,15)+dgamma(x,33,55)),type="l")
lines(x,(dgamma(x,15,15)+dgamma(x,33,55))*x^3,lwd=2)
plot(x,dgamma(x,30,30)+dgamma(x,14,23),type="l")
lines(x,(dgamma(x,30,30)+dgamma(x,14,23))*x^3,lwd=2)
x=seq(0.1,10, by = 0.2)
plot(x,dgamma(x,30,30)+dgamma(x,14,23),type="l")
lines(x,(dgamma(x,30,30)+dgamma(x,14,23))*x^3,lwd=2)
plot(x,(dgamma(x,15,15)+dgamma(x,33,55)),type="l")
lines(x,(dgamma(x,15,15)+dgamma(x,33,55))*x^3,lwd=2)
install.packages('Sleuth2')
library(Sleuth2)
summary(case0201)
a=case020
a=case0201
Bumpus=case0201
Bumpus=case0201
summary(Bumpus)
View(Bumpus)
View(Bumpus)
View(Bumpus)
## side by side box plot
boxplot(Bumpus$Humerus~Bumpus$Status) ## side by side box plot HERE
## side by side box plot
boxplot(Bumpus$Humerus~Bumpus$Status, xlab= 'Status', ylab = ' Humerus Length') ## side by side box plot HERE
## side by side box plot
boxplot(Bumpus$Humerus~Bumpus$Status, xlab= 'Status', ylab = ' Humerus Length (inches)') ## side by side box plot HERE
View(Bumpus)
## draw side by side histogram
par(mfrow=c(1,2))# subplots of 2 rows by 1 column
## unpack the data by status
Perished=Bumpus$Humerus[Bumpus$Status=="Perished"]
Survived=Bumpus$Humerus[Bumpus$Status=="Survived"]
## draw side by side histogram
par(mfrow=c(1,2))# subplots of 2 rows by 1 column
#one hist atop the other one
hist(Perished,main="Perished",col='blue',prob=T) ## draw histogram for blue states HERE
hist(Survived,main="Survived",col='red',prob=T) ## draw histogram for blue states HERE
hist(Survived,main="Survived",col='red',xlim = c(640,800),prob=T) ## draw histogram  HERE
#one hist atop the other one
hist(Perished,main="Perished",col='blue',xlim = c(640,800),prob=T) ## draw histogram HERE
## unpack the data by status
Perished=Bumpus$Humerus[Bumpus$Status=="Perished"]
Survived=Bumpus$Humerus[Bumpus$Status=="Survived"]
## draw side by side histogram
par(mfrow=c(1,2))# subplots of 2 rows by 1 column
#one hist atop the other one
hist(Perished,main="Perished",col='blue',xlim = c(640,800),prob=T) ## draw histogram HERE
hist(Survived,main="Survived",col='red',xlim = c(640,800),prob=T) ## draw histogram  HERE
summary(Survived)
summary(Perished)
summary(Survived)
q()
pwd()
wd()
getwd()
getwd()
library("Sleuth2")
data=ex0333
View(data)
View(data)
data2=ex0321
View(data2)
View(data2)
q()
x=c(5.79, 1579.52, 2323.70)
y=c(68.8, 108.29, 110.29, 426.07, 1067.60)
xLog=log(x)
yLog=log(y)
mean(xLog)
mean(yLog)
sd(xLog)
sd(yLog)
mean(xLog)-mean(yLog)
exp(mean(xLog)-mean(yLog))
var(xLog)
q()
in_state=c(1000, 4000, 5000,8000,40000)
mean(in_state)
log(in_state)
in_state_loglog(in_state)
in_state_log=log(in_state)
mean(in_state_log)
log(11600)
log(5000)
q()
x1=c(5.79, 1579.52, 2323,70)
x1=c(5.79, 1579.52, 2323.70)
x2=c(68.8, 108.29, 110.29, 426.07, 1067.60)
y1=log(x1)
y2=log(x2)
y1
y2
mean(y1)
mean(y2)
mean(y1)-mean(y2)
exp(mean(y1)-mean(y2))
var(y1)
var(y2)
y1
y2
0.295+4.303*sqrt(11.257/3+1.31/5)
exp(-8.326)
exp(8.9)
(8.5-11/2)/sqrt(11/4)
q()
setwd("C:/Users/nguyenap/OneDrive - University of Indianapolis/Desktop/UIndy/Teaching/Math 510/RCode/04_ANOVA")
FattyAcid=read.csv("FattyAcidData.csv")
fullModel=aov(PROTEIN~TREATMNT,data=FattyAcid)
summary(fullModel)
TukeyHSD(fullModel, conf.level=.95)
plot(TukeyHSD(fullModel, conf.level=.95), las=1)
Residuals=resid(lm(PROTEIN~TREATMNT,data=FattyAcid))#function resid computes the residuals
stripchart(Residuals~FattyAcid$TREATMNT)#plots residuals vs. Treatments
fittedValues= fitted(lm(PROTEIN~TREATMNT,data=FattyAcid))# the fitted values are the sample means
plot(fittedValues,Residuals)#gives the standard residual plot
qqnorm(Residuals, pch = 19, frame = FALSE)
qqline(Residuals, col = "red", lwd = 3)
plot(fullModel)
FattyAcidReduced=read.csv("FattyAcidData_reduced.csv")
reduceModel=aov(PROTEIN~TREATMNT,data=FattyAcidReduced)
summary(reduceModel)
anova(reduceModel,fullModel)
fullModel=lm(PROTEIN ~ TREATMNT,data=FattyAcid)
reducedModel=lm(PROTEIN ~ TREATMNT,data=FattyAcidReduced)
anova(reduceModel,fullModel)
anova(reduceModel,fullModel)
q()
